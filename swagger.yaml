openapi: 3.0.0
info:
  title: MEN REST-API
  description: MongoDB ExpressJS NodeJS REST-API (DE Spring 2024)
  version: 1.0.0
servers:
  - url: http://localhost:4000/api/
    description: Localhost development server
  - url: https://men-restapi-wds24.onrender.com/api/
    description: Remote online render.com server

tags:
  - name: Product Routes
    description: Routes that handles products

  - name: User Routes
    description: Routes that handles users

components:
  securitySchemes:
    ApiKeyAuth: # arbitrary name for the security scheme
      type: apiKey
      in: header # can be "header", "query" or "cookie"
      name: auth-token

  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        inStock:
          type: boolean

    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        date:
          type: string

paths:
  /user/register:
    post:
      tags:
        - User Routes
      summary: Register a new User
      description: Register a new User in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  _id:
                    type: string

  /user/login:
    post:
      tags:
        - User Routes
      summary: Login a User
      description: Login a User in order to get JWT token (auth-token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string

      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string

  /products:
    get:
      tags:
        - Product Routes
      summary: Retrieves a list of Products
      description: Retrieves a list of products as JSON objects.
      responses:
        200:
          description: A list of product JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      tags:
        - Product Routes
      summary: Create a new Product
      description: Create a new Product
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              name: 'Test Product'
              description: 'Test Product description'
              price: 10.95
              inStock: true

      responses:
        201:
          description: Product created succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      tags:
        - Product Routes
      summary: Specific Product
      description: Retrieves a specific Product based on it id.
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: A Product in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    put:
      tags:
        - Product Routes
      summary: Updates a specific Product
      description: Updates a specific Product based on it id
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'

      responses:
        201:
          description: Product updated succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

    delete:
      tags:
        - Product Routes
      summary: Deletes a specific Product
      description: Deletes a specific Product based on it id
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string

      responses:
        201:
          description: Product deleted succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/random:
    get:
      tags:
        - Product Routes
      summary: Retrieves a random Product
      description: Retrieves a random product as a JSON objects.
      responses:
        200:
          description: A random product JSON object.
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Product'

  /products/{field}/{value}:
    get:
      tags:
        - Product Routes
      summary: Retrieves a liste of product based on the search filter
      description: Retrieves a random product as a JSON objects.
      parameters:
        - in: path
          name: field
          required: true
          description: Selected field from the document schema
          schema:
            type: string
        - in: path
          name: value
          required: true
          description: Selected value from the document schema
          schema:
            type: string
      responses:
        200:
          description: A random product JSON object.
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Product'
